{"version":3,"file":"Notifications-CnZTl2hr.js","sources":["../../src/views/account/Notifications.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-4 py-6 max-w-6xl\">\r\n    <div class=\"flex flex-col md:flex-row gap-6\">\r\n      <!-- Notifications content -->\r\n      <div class=\"flex-1\">\r\n        <div class=\"bg-light-secondary dark:bg-dark-secondary rounded-lg shadow\">\r\n          <div class=\"border-b border-light-neutral-200 dark:border-dark-neutral-700 px-4 py-4 sm:px-6\">\r\n            <div class=\"flex items-center justify-between\">\r\n              <h2 class=\"text-xl font-semibold text-light-text-primary dark:text-dark-text-primary\">\r\n                Notifications\r\n              </h2>\r\n              <div class=\"flex items-center space-x-2\">\r\n                <button \r\n                  @click=\"markAllAsRead\" \r\n                  class=\"inline-flex items-center px-3 py-1.5 border border-orange-600 text-sm font-medium rounded-md text-orange-600 bg-white dark:bg-dark-secondary hover:bg-orange-600 hover:text-white transition-colors\"\r\n                  :disabled=\"!hasUnread\"\r\n                >\r\n                  Mark all as read\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div v-if=\"loading\" class=\"px-4 py-8 sm:px-6 text-center\">\r\n            <div class=\"inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-r-2 border-accent-primary\"></div>\r\n            <p class=\"mt-2 text-light-text-secondary dark:text-dark-neutral-400\">Loading notifications...</p>\r\n          </div>\r\n\r\n          <div v-else-if=\"!authStore.user\" class=\"px-4 py-8 sm:px-6 text-center\">\r\n            <p class=\"text-light-text-secondary dark:text-dark-neutral-400\">Please sign in to view your notifications.</p>\r\n            <RouterLink to=\"/login\" class=\"mt-2 inline-block text-accent-primary hover:underline\">Sign in</RouterLink>\r\n          </div>\r\n\r\n          <div v-else-if=\"notificationStore.indexMissing\" class=\"px-4 py-8 sm:px-6 text-center\">\r\n            <div class=\"bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 p-4 rounded\">\r\n              <div class=\"flex\">\r\n                <div class=\"shrink-0\">\r\n                  <ExclamationTriangleIcon class=\"h-5 w-5 text-yellow-400\" aria-hidden=\"true\" />\r\n                </div>\r\n                <div class=\"ml-3\">\r\n                  <p class=\"text-sm text-yellow-700 dark:text-yellow-200\">\r\n                    Database setup required. The notifications system needs a database index.\r\n                  </p>\r\n                  <div class=\"mt-2\">\r\n                    <button \r\n                      @click=\"createIndex\"\r\n                      class=\"px-2 py-1 rounded bg-orange-600 hover:bg-orange-700 text-white text-xs font-medium\"\r\n                    >\r\n                      Create Index\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div v-else-if=\"notificationStore.userNotifications.length === 0\" class=\"px-4 py-8 sm:px-6 text-center\">\r\n            <div class=\"mb-4\">\r\n              <BellIcon class=\"h-12 w-12 text-light-neutral-400 dark:text-dark-neutral-500 mx-auto\" />\r\n            </div>\r\n            <p class=\"text-light-text-secondary dark:text-dark-neutral-400\">You don't have any notifications yet.</p>\r\n          </div>\r\n\r\n          <div v-else class=\"divide-y divide-light-neutral-200 dark:divide-dark-neutral-700\">\r\n            <div \r\n              v-for=\"notification in sortedNotifications\" \r\n              :key=\"notification.id\" \r\n              :class=\"[\r\n                'px-4 py-4 sm:px-6 flex',\r\n                notification.read ? 'bg-light-primary dark:bg-dark-primary' : 'bg-light-neutral-50 dark:bg-dark-neutral-800'\r\n              ]\"\r\n            >\r\n              <div class=\"shrink-0 pt-0.5\">\r\n                <component \r\n                  :is=\"notificationIcons[notification.type] || notificationIcons.info\" \r\n                  :class=\"[\r\n                    'h-6 w-6', \r\n                    notificationIconColors[notification.type] || notificationIconColors.info\r\n                  ]\" \r\n                  aria-hidden=\"true\" \r\n                />\r\n              </div>\r\n              <div class=\"ml-4 flex-1\">\r\n                <div class=\"flex items-center justify-between\">\r\n                  <p class=\"font-medium text-light-text-primary dark:text-dark-text-primary\">{{ notification.title }}</p>\r\n                  <p class=\"text-xs text-light-text-tertiary dark:text-dark-neutral-500\">{{ formatDate(notification.createdAt) }}</p>\r\n                </div>\r\n                <p class=\"mt-1 text-light-text-secondary dark:text-dark-neutral-400\">{{ notification.message }}</p>\r\n                <div class=\"mt-2 flex justify-between items-center\">\r\n                  <div class=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium\" :class=\"notificationBadgeClasses[notification.type] || notificationBadgeClasses.info\">\r\n                    {{ notification.type }}\r\n                  </div>\r\n                  <button \r\n                    v-if=\"!notification.read\"\r\n                    @click=\"markAsRead(notification)\" \r\n                    class=\"text-sm text-orange-600 hover:underline\"\r\n                  >\r\n                    Mark as read\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div v-if=\"notificationStore.userNotifications.length > 0\" class=\"px-4 py-3 bg-light-tertiary dark:bg-dark-tertiary sm:px-6 flex justify-between items-center\">\r\n            <span class=\"text-sm text-light-text-secondary dark:text-dark-neutral-400\">\r\n              {{ unreadCount }} unread notifications\r\n            </span>\r\n            <!-- You can add pagination or load more functionality here if needed -->\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch } from 'vue';\r\nimport { RouterLink } from 'vue-router';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport { useNotificationStore } from '@/stores/notification';\r\nimport { \r\n  BellIcon,\r\n  CheckCircleIcon,\r\n  ExclamationCircleIcon,\r\n  InformationCircleIcon,\r\n  ExclamationTriangleIcon \r\n} from '@heroicons/vue/24/outline';\r\n\r\nconst authStore = useAuthStore();\r\nconst notificationStore = useNotificationStore();\r\nconst loading = ref(true);\r\n\r\n// Icons and colors for different notification types\r\nconst notificationIcons = {\r\n  success: CheckCircleIcon,\r\n  error: ExclamationCircleIcon,\r\n  info: InformationCircleIcon,\r\n  warning: ExclamationTriangleIcon\r\n};\r\n\r\nconst notificationIconColors = {\r\n  success: 'text-green-500',\r\n  error: 'text-red-500',\r\n  info: 'text-blue-500',\r\n  warning: 'text-yellow-500'\r\n};\r\n\r\nconst notificationBadgeClasses = {\r\n  success: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200',\r\n  error: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200',\r\n  info: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-200',\r\n  warning: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-200'\r\n};\r\n\r\n// Sort notifications with unread first, then by date\r\nconst sortedNotifications = computed(() => {\r\n  return [...notificationStore.userNotifications].sort((a, b) => {\r\n    // First sort by read status (unread first)\r\n    if (!a.read && b.read) return -1;\r\n    if (a.read && !b.read) return 1;\r\n    \r\n    // Then sort by date (newest first)\r\n    const dateA = a.createdAt instanceof Date ? a.createdAt : new Date(a.createdAt);\r\n    const dateB = b.createdAt instanceof Date ? b.createdAt : new Date(b.createdAt);\r\n    return dateB - dateA;\r\n  });\r\n});\r\n\r\n// Count of unread notifications\r\nconst unreadCount = computed(() => {\r\n  return notificationStore.userNotifications.filter(n => !n.read).length;\r\n});\r\n\r\n// Check if there are any unread notifications\r\nconst hasUnread = computed(() => unreadCount.value > 0);\r\n\r\n// Format date for display\r\nconst formatDate = (date) => {\r\n  if (!date) return '';\r\n  \r\n  const now = new Date();\r\n  const notifDate = new Date(date);\r\n  \r\n  // If today, show time\r\n  if (notifDate.toDateString() === now.toDateString()) {\r\n    return `Today at ${notifDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\r\n  }\r\n  \r\n  // If yesterday\r\n  const yesterday = new Date(now);\r\n  yesterday.setDate(now.getDate() - 1);\r\n  if (notifDate.toDateString() === yesterday.toDateString()) {\r\n    return `Yesterday at ${notifDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\r\n  }\r\n  \r\n  // If within last week\r\n  const oneWeekAgo = new Date(now);\r\n  oneWeekAgo.setDate(now.getDate() - 7);\r\n  if (notifDate > oneWeekAgo) {\r\n    const options = { weekday: 'long' };\r\n    return `${notifDate.toLocaleDateString(undefined, options)} at ${notifDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\r\n  }\r\n  \r\n  // If this year\r\n  if (notifDate.getFullYear() === now.getFullYear()) {\r\n    const options = { month: 'short', day: 'numeric' };\r\n    return notifDate.toLocaleDateString(undefined, options);\r\n  }\r\n  \r\n  // Otherwise show full date\r\n  return notifDate.toLocaleDateString();\r\n};\r\n\r\n// Mark a single notification as read\r\nconst markAsRead = async (notification) => {\r\n  try {\r\n    await notificationStore.markAsRead(notification.id);\r\n  } catch (error) {\r\n    console.error(\"Error marking notification as read:\", error);\r\n  }\r\n};\r\n\r\n// Mark all notifications as read\r\nconst markAllAsRead = async () => {\r\n  try {\r\n    const unreadNotifications = notificationStore.userNotifications.filter(n => !n.read);\r\n    for (const notification of unreadNotifications) {\r\n      await notificationStore.markAsRead(notification.id);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error marking all notifications as read:\", error);\r\n  }\r\n};\r\n\r\n// Open Firebase index creation page\r\nconst createIndex = () => {\r\n  if (notificationStore.indexCreationUrl) {\r\n    window.open(notificationStore.indexCreationUrl, '_blank');\r\n  } else {\r\n    console.warn(\"Index creation URL is not available\");\r\n  }\r\n};\r\n\r\n// Load notifications when the component mounts if user is authenticated\r\nonMounted(() => {\r\n  if (authStore.user) {\r\n    notificationStore.loadUserNotifications();\r\n  }\r\n  loading.value = false;\r\n});\r\n\r\n// Watch for auth changes to reload notifications\r\nwatch(() => authStore.user, (newUser) => {\r\n  if (newUser) {\r\n    loading.value = true;\r\n    notificationStore.loadUserNotifications();\r\n    loading.value = false;\r\n  }\r\n});\r\n</script>\r\n"],"names":["authStore","useAuthStore","notificationStore","useNotificationStore","loading","ref","notificationIcons","CheckCircleIcon","ExclamationCircleIcon","InformationCircleIcon","ExclamationTriangleIcon","notificationIconColors","notificationBadgeClasses","sortedNotifications","computed","a","b","dateA","unreadCount","n","hasUnread","formatDate","date","now","notifDate","yesterday","oneWeekAgo","options","markAsRead","notification","error","markAllAsRead","unreadNotifications","createIndex","onMounted","watch","newUser"],"mappings":"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"}